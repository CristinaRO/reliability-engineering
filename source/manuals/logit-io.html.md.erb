---
title: Sending logs securely to Logit.io
---

# <%= current_page.data.title %>

*we should say here why we have we written this guidance?
what problem are we fixing?
then we go into how to do the thing?*

## Provision a new stack

After signing into Logit.io create a new stack by selecting **Add stack** from the Stacks section of the Logit.io dashboard.

###Â Stack name

When choosing a stack name, consider that other teams will need to use this name to differentiate your stack from one of their own.

Your own team will need to differentiate between stacks they own, so your stack name should be specific, concise, and convey information about who owns it and which environment it serves.

For example:

* Good: `GOV.UK Verify Hub Production (Green)`
* Bad: `New dev environment 2`

### Stack version

In the **Stack version** field select the latest ELK version from the displayed drop-down menu, unless you have specific reasons to prefer an earlier version.

Complete the **Daily logs** and **Retention fields** as appropriate then choose **continue**, confirm your stack details are correct and then **Create Stack**.

Once created, return to the Logit.io Dashboard.

## Configuring a new stack

### Id and Stack API Key

An Id and Stack API Key will have been generated for your new stack. To view this information, choose **Settings** from the Logit.io Dashboard.

The Id and Stack API Key will both be UUIDs. We'll use the UUID below in our examples for the remainder of this manual.

`f046ca39-8388-4c49-a536-19f95a555905`

### Logstash endpoint

The Logstash endpoint is formed from the stack ID. Our example stack's Logstash endpoint is `f046ca39-8388-4c49-a536-19f95a555905-ls.logit.io`.

Logstash speaks many different protocols and these are all assigned to sequential TCP ports which are visible from **Logstash Inputs** under the stack **settings** page.

TCP ports are assigned on a per-stack basis at stack creation time and will be different per stack.

## Shut down unsecure inputs

Logit stacks have a non-restrictive security configuration by default. Each of the inputs listed will be behind a TCP port that is open to the internet at large, and will not authenticate connecting clients.

The only inputs we are interested in are **Beats-SSL** and **Syslog-SSL**, you will need to log a support request with Logit to close the TCP or UDP ports for all other protocols.

If you know in advance which IP addresses or address ranges you will be sourcing logging traffic from, include these in your request so that the **Beats-SSL** and **Syslog-SSL** ports can be whitelisted.

## Request TLS mutual auth

Request TLS mutual authentication is switched on for your stack. You can do this through a support request to Logit.

Logit provides two methods to achieve this:

* provide Logit with a CA certificate of your own and instruct them to trust client certificates signed by that CA for access to the stack

* the second, simpler method involves Logit generating a client private key and certificate on your behalf, signing it with their CA and sending it back

This manual will cover just the second, simpler method.

## Logit PKI architecture

You can inspect the certificate presented by Logit's TLS endpoints on a
freshly provisioned stack using the OpenSSL command line tool:

```
$ openssl s_client -connect f046ca39-8388-4c49-a536-19f95a555905-ls.logit.io:12345 </dev/null
```

You will see subject of the server certificate presented is:

`CN=*.logit.io`, issued by `/C=US/O=GeoTrust Inc./CN=RapidSSL SHA256 CA` which is in turn issued by `/C=US/O=GeoTrust Inc./CN=GeoTrust Global CA`

This is a fairly standard wildcard certificate issued by a publicly trusted commercial CA. This is the certificate referred to by Logit's [Syslog documentation](https://logit.io/sources/configure/syslog). When mutual auth is enabled, Logit will switch this out for a server certificate managed by their own PKI, and their own root CA, making the above documentation incorrect.

When mutual auth is enabled, the CA chain for the server certificate becomes:

 - `Logit.io Ltd Root CA`
 - `Logit.io Intermediate CA`
 - `f046ca39-8388-4c49-a536-19f95a555905 Intermediate CA` - Your stack's
   intermediate CA
 - `f046ca39-8388-4c49-a536-19f95a555905-ls.logit.io` - Your stack's Logstash
   endpoint's server certificate

Please note, the stack-specific intermediate CA is also the signing CA for the client certificate.

## Certificate bundle provided by Logit

Logit will send you a zip file containing three files.

1. `f046ca39-8388-4c49-a536-19f95a555905-<x>.cert.pem` where x is an 8-digit hex number. This is the client certificate, signed by the stack-specific intermediate CA.

2. `f046ca39-8388-4c49-a536-19f95a555905-<x>.key.encrypted.pem` the corresponding RSA private key for the above certificate. This private key needs to be provided to any process that wants to authenticate to the Logit service to initiate a log stream, for example, Filebeat or Rsyslog. The private key is encrypted.  The decryption password is your **Stack API Key**, available through **settings** in the Logit dashboard.

3. `f046ca39-8388-4c49-a536-19f95a555905-ca-chain.pem` a concatenation of three certificates forming the CA chain, both from the Logit Root CA to the above certificate, and from the Logit Root CA to the server certificate.

Although it is permissible in the TLS spec for the client and the server certificates to be signed by different CAs, not all implemenations will do this. GnuTLS is used by Rsyslog and has this limitation:

> Even in x509/fingerprint mode, both the client and sever certificate currently
> must be signed by the same root CA. This is an artifact of the underlying
> GnuTLS library and the way we use it.  It is expected that we can resolve this
> issue in the future.

for further information refer to [RSyslog's documentation](http://www.rsyslog.com/doc/ns_gtls.html)

Although we have not done any further testing around this, there may be some possible configuration where the Logit server certificate is signed by the GeoTrust public CA, and the client certifiate is signed by a GDS CA that Logit trusts.

## Install client key, client certificates, and CA chain certificates

Install:

 * `f046ca39-8388-4c49-a536-19f95a555905-ca-chain.pem`
    to `/etc/ssl/certs/logit-ca.pem`; mode 0644
 * `f046ca39-8388-4c49-a536-19f95a555905-<x>.cert.pem`
    to `/etc/ssl/certs/logit-client.pem`; mode 0644
 * `f046ca39-8388-4c49-a536-19f95a555905-<x>.key.encrypted.pem`
    to `/etc/ssl/private/logit-client.key`; mode 0440

Set the group owner on the client key to `ssl-cert` to grant access to non-root processes whose UIDs are members of the `ssl-cert` group.

The client key will need to be decrypted before being installed.

## Configuring Filebeat

[Filebeat](https://www.elastic.co/products/beats/filebeat) is a Logstash client that reads log files from the filesystem and ships them to Logstash as they are being written to. Please refer to Filebeat's own documentation for details on installation, general configuration and operation.

The following is a sample configuration fragment for mutual auth to Logit.  The port number in the `hosts` specification must be the TCP port assigned to the `Beats-SSL` input in your stack.

```yaml
output.logstash:
  enabled: true
  hosts:
    - f046ca39-8388-4c49-a536-19f95a555905-ls.logit.io:14303
  ssl:
    enabled: true
    certificate_authorities:
      - /etc/ssl/certs/logstash-ca.crt
    certificate: "/etc/ssl/certs/logstash-client.crt"
    key: "/etc/ssl/private/logstash-client.key"
```

Puppet example with *optional* mutual auth - via the [pcfens-filebeat module](https://github.com/pcfens/puppet-filebeat):

```puppet
$logstash_output_config = {
  'logstash'                    => {
    'enabled'                   => 'true',
    'hosts'                     => ["${logstash_host}:${logstash_port}"],
    'ssl'                       => {
      'enabled'                 => true,
      'certificate_authorities' => [ $logstash_ca_cert_path ],
    },
  }
}

if $mutual_auth {
  $logstash_mutual_auth_config = {
    'logstash'        => {
      'ssl'           => {
        'key'         => $logstash_client_key_path,
        'certificate' => $logstash_client_cert_path,
      }
    }
  }
}
else {
  $logstash_mutual_auth_config = {}
}


$filebeat_outputs = deep_merge($logstash_output_config, $logstash_mutual_auth_config)

class { '::filebeat':
  manage_repo   => false,
  major_version => 5,
  outputs       => $filebeat_outputs,
}
```

## Configuring Rsyslog

Rsyslog version 8.x is known to work, we have not tried earlier versions. Although Ubuntu Trusty ships with 7.x, packages of 8.x for Trusty are available on the Rsyslog vendor's [PPA](https://launchpad.net/~adiscon/+archive/ubuntu/v8-stable). You must also install the optional `rsyslog-gnutls` package.

Then, load the `gtls` "stream driver" and configure it for operation with Logit:

```
$DefaultNetstreamDriver gtls
$DefaultNetstreamDriverCAFile /etc/ssl/certs/logstash-ca.crt
$ActionSendStreamDriverAuthMode x509/name
$ActionSendStreamDriverPermittedPeer f046ca39-8388-4c49-a536-19f95a555905-ls.logit.io
$ActionSendStreamDriverMode 1
$DefaultNetstreamDriverCertFile /etc/ssl/certs/logstash-client.crt
$DefaultNetstreamDriverKeyFile /etc/ssl/private/logstash-client.key
```

Declare an action on matching messages that uses the `omfwd` module to forward them to Logit:

```
*.*;local2.none action (
  type="omfwd"
  target="f046ca39-8388-4c49-a536-19f95a555905-ls.logit.io"
  name="logstash"
  template="ForwardFormat"
  protocol="TCP"
  port="14305"
  streamdriver="gtls"
  streamdrivermode="1"
  queue.spoolDirectory="/var/spool/rsyslog"
  queue.filename="logstash.queue"
  queue.type="LinkedList"
  queue.saveOnShutdown="on"
  queue.timeOutEnqueue="1"
  queue.maxDiskSpace="1g"
  action.resumeRetryCount="-1"
)
```

```
Note the `streamdriver="gtls"` and `streamdrivermode="1"` are required here,
despite the earlier config fragment implying that the default behaviour has
been changed.
```

## Proxy patterns

Architectural constraints around Egress security often mean that having each of your servers connect directly to Logit's endpoint is not an option.

This section covers some possible approaches to securely relaying Beats and Syslog traffic to Logit.io at your environment's boundary.

### Proxying Beats-SSL (Lumberjack protocol)

The Lumberjack protocol is not HTTP based, and as such, you can't use an HTTP proxy. Filebeat does, however, support SOCKS negotiation.

In the following example, `10.1.0.0/24` is the private network CIDR range of the log-generating servers that you're proxying for, and `12345` is the TCP port of the Beats-SSL input on the `f046ca39-8388-4c49-a536-19f95a555905-ls.logit.io` Logstash endpoint.

Sample, minimal configuration for a Dante socks proxy:


```
logoutput: syslog

internal: eth0 port = 1080
external: eth0

method: none
clientmethod: none

user.privileged: proxy
user.notprivileged: nobody
user.libwrap: nobody

client pass {
  from: 10.1.0.0/24
  to: 10.1.0.0/24
  method: none
  log: connect disconnect error
}

client block {
  from: 0.0.0.0/0
  to: 0.0.0.0/0
  log: connect error
}

pass {
  from: 10.1.0.0/24 to: f046ca39-8388-4c49-a536-19f95a555905-ls.logit.io port = 12345
  protocol: tcp
  command: connect
  log: connect disconnect error
}
```

In this example, `10.1.0.0/24` is the private network CIDR range of the log-generating servers that you're proxying for, and `12345` is the TCP port of the Beats-SSL input on the `f046ca39-8388-4c49-a536-19f95a555905-ls.logit.io` Logstash endpoint.

### Proxying Syslog

*This section may need updating as the examples have not yet been tested*

The Syslog protocol is designed to be relayed, and Rsyslog supports this fully.

The configuration example in the above section will in fact already do the egress-proxy-to-Logit part of the relay unmodified, and this should be applied to your Egress proxy's rsyslogd config.

However, you may need some additional configuration to allow your Egress proxy's rsyslogd to accept syslog messages from your internal hosts. For example:

```
$ModLoad imudp
$UDPServerAddress 0.0.0.0
$UDPServerRun 514
```
